{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\alexa\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\SimpleApp\\\\App\\\\frontend-app\\\\src\\\\scenes\\\\QuestionList\\\\QuestionList.js\";\nimport React from \"react\";\nimport \"./QuestionList.css\"; //Import Components\n\nimport ScrollableTable from \"../../components/ScrollableTable\"; // const mockQuestions = [\n//   {\n//     id: \"5feb6904f827835ed827ddeb\",\n//     name: \"Who am I?\",\n//     email: \"who@sky.world\",\n//     date: \"2020-12-31T00:00:00.000Z\",\n//     observations: \"Who knows.\",\n//     creationDate: \"2020-12-29T17:36:04.933Z\",\n//   },\n//   {\n//     id: \"5feb6904f827835ed827ddeb\",\n//     name: \"Who am I?\",\n//     email: \"who@sky.world\",\n//     date: \"2020-12-31T00:00:00.000Z\",\n//     observations: \"Who knows.\",\n//     creationDate: \"2020-12-29T17:36:04.933Z\",\n//   },\n// ];\n\nconst columns = [{\n  id: \"name\",\n  label: \"Name\"\n}, {\n  id: \"email\",\n  label: \"Email\"\n}, {\n  id: \"date\",\n  label: \"Date\"\n}, {\n  id: \"observations\",\n  label: \"Observations\"\n}, {\n  id: \"creationDate\",\n  label: \"Creation Date\"\n}];\n\nclass QuestionList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchQuestionList = ({\n      id,\n      page\n    }) => {\n      try {\n        fetch(process.env.REACT_APP_SERVER_URL + \"/questions\").then(res => res.json()).then(result => {\n          this.setState({\n            questionList: result\n          });\n        });\n      } catch (error) {\n        switch (error.response.status) {\n          case 400:\n          case 401:\n            errorMessage = translator.errorMessage(error);\n            break;\n\n          default:\n            errorMessage = translation.errors.default;\n        }\n      }\n    };\n\n    this.state = {\n      questionList: []\n    };\n  }\n\n  componentDidMount() {}\n\n  componentWillUnmount() {\n    this.setState({\n      questionList: []\n    });\n  }\n\n  render() {\n    const questionList = this.state.questionList;\n    console.log(questionList);\n    return /*#__PURE__*/_jsxDEV(ScrollableTable, {\n      columns: columns,\n      rows: questionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default QuestionList;","map":{"version":3,"sources":["C:/Users/alexa/OneDrive/Área de Trabalho/SimpleApp/App/frontend-app/src/scenes/QuestionList/QuestionList.js"],"names":["React","ScrollableTable","columns","id","label","QuestionList","Component","constructor","props","fetchQuestionList","page","fetch","process","env","REACT_APP_SERVER_URL","then","res","json","result","setState","questionList","error","response","status","errorMessage","translator","translation","errors","default","state","componentDidMount","componentWillUnmount","render","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP,C,CACA;;AACA,OAAOC,eAAP,MAA4B,kCAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,EAAE,EAAE,MADN;AAEEC,EAAAA,KAAK,EAAE;AAFT,CADc,EAKd;AACED,EAAAA,EAAE,EAAE,OADN;AAEEC,EAAAA,KAAK,EAAE;AAFT,CALc,EASd;AACED,EAAAA,EAAE,EAAE,MADN;AAEEC,EAAAA,KAAK,EAAE;AAFT,CATc,EAad;AACED,EAAAA,EAAE,EAAE,cADN;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAbc,EAiBd;AACED,EAAAA,EAAE,EAAE,cADN;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAjBc,CAAhB;;AAuBA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAgBnBC,iBAhBmB,GAgBC,CAAC;AAACN,MAAAA,EAAD;AAAKO,MAAAA;AAAL,KAAD,KAAgB;AAChC,UAAG;AACDC,QAAAA,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,oBAAZ,GAAmC,YAApC,CAAL,CACCC,IADD,CACOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADf,EAECF,IAFD,CAEOG,MAAD,IAAY;AAChB,eAAKC,QAAL,CAAc;AAAEC,YAAAA,YAAY,EAAEF;AAAhB,WAAd;AACD,SAJD;AAKD,OAND,CAME,OAAOG,KAAP,EAAc;AACd,gBAAQA,KAAK,CAACC,QAAN,CAAeC,MAAvB;AACI,eAAK,GAAL;AACA,eAAK,GAAL;AACIC,YAAAA,YAAY,GAAGC,UAAU,CAACD,YAAX,CAAwBH,KAAxB,CAAf;AACA;;AACJ;AACIG,YAAAA,YAAY,GAAGE,WAAW,CAACC,MAAZ,CAAmBC,OAAlC;AANR;AAQD;AACJ,KAjCkB;;AAGjB,SAAKC,KAAL,GAAa;AACXT,MAAAA,YAAY,EAAE;AADH,KAAb;AAGD;;AAEDU,EAAAA,iBAAiB,GAAG,CAEnB;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKZ,QAAL,CAAc;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAd;AACD;;AAqBDY,EAAAA,MAAM,GAAG;AACP,UAAMZ,YAAY,GAAG,KAAKS,KAAL,CAAWT,YAAhC;AAEAa,IAAAA,OAAO,CAACC,GAAR,CAAYd,YAAZ;AAEA,wBAAO,QAAC,eAAD;AAAiB,MAAA,OAAO,EAAElB,OAA1B;AAAmC,MAAA,IAAI,EAAEkB;AAAzC;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA1CwC;;AA6C3C,eAAef,YAAf","sourcesContent":["import React from \"react\";\r\nimport \"./QuestionList.css\";\r\n//Import Components\r\nimport ScrollableTable from \"../../components/ScrollableTable\";\r\n\r\n// const mockQuestions = [\r\n//   {\r\n//     id: \"5feb6904f827835ed827ddeb\",\r\n//     name: \"Who am I?\",\r\n//     email: \"who@sky.world\",\r\n//     date: \"2020-12-31T00:00:00.000Z\",\r\n//     observations: \"Who knows.\",\r\n//     creationDate: \"2020-12-29T17:36:04.933Z\",\r\n//   },\r\n//   {\r\n//     id: \"5feb6904f827835ed827ddeb\",\r\n//     name: \"Who am I?\",\r\n//     email: \"who@sky.world\",\r\n//     date: \"2020-12-31T00:00:00.000Z\",\r\n//     observations: \"Who knows.\",\r\n//     creationDate: \"2020-12-29T17:36:04.933Z\",\r\n//   },\r\n// ];\r\n\r\nconst columns = [\r\n  {\r\n    id: \"name\",\r\n    label: \"Name\",\r\n  },\r\n  {\r\n    id: \"email\",\r\n    label: \"Email\",\r\n  },\r\n  {\r\n    id: \"date\",\r\n    label: \"Date\",\r\n  },\r\n  {\r\n    id: \"observations\",\r\n    label: \"Observations\",\r\n  },\r\n  {\r\n    id: \"creationDate\",\r\n    label: \"Creation Date\",\r\n  },\r\n];\r\n\r\nclass QuestionList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questionList: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n   \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({ questionList: [] });\r\n  }\r\n\r\n  fetchQuestionList = ({id, page}) => {\r\n      try{\r\n        fetch(process.env.REACT_APP_SERVER_URL + \"/questions\")\r\n        .then((res) => res.json())\r\n        .then((result) => {\r\n          this.setState({ questionList: result });\r\n        });\r\n      } catch (error) {\r\n        switch (error.response.status) {\r\n            case 400:\r\n            case 401:\r\n                errorMessage = translator.errorMessage(error);\r\n                break;\r\n            default:\r\n                errorMessage = translation.errors.default;\r\n        }\r\n      }\r\n  }\r\n\r\n  render() {\r\n    const questionList = this.state.questionList;\r\n\r\n    console.log(questionList);\r\n\r\n    return <ScrollableTable columns={columns} rows={questionList} />;\r\n  }\r\n}\r\n\r\nexport default QuestionList;\r\n"]},"metadata":{},"sourceType":"module"}