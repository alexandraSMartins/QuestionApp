{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\alexa\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\SimpleApp\\\\App\\\\frontend-app\\\\src\\\\scenes\\\\QuestionList\\\\QuestionList.js\";\nimport React, { Fragment } from \"react\"; //Import Components\n\nimport Alert from \"@material-ui/lab/Alert\";\nimport ScrollableTable from \"../../components/ScrollableTable\";\nimport SearchBar from \"../../components/SearchBar/SearchBar\"; //Questions table column headers\n\nconst columns = [{\n  id: \"id\",\n  label: \"ID\"\n}, {\n  id: \"name\",\n  label: \"Name\"\n}, {\n  id: \"email\",\n  label: \"Email\"\n}, {\n  id: \"date\",\n  label: \"Date\"\n}, {\n  id: \"observations\",\n  label: \"Observations\"\n}, {\n  id: \"creationDate\",\n  label: \"Creation Date\"\n}];\n\nclass QuestionList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionResult: {},\n      //result from fetching questions to the db\n      errorAlert: false,\n      //turns true whenever an error occurs from external requests. When true, an alert will appear with an error message\n      errorMessage: \"\" //saves the error message if an error occurs\n\n    };\n    this.fetchQuestionList = this.fetchQuestionList.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchQuestionList();\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      questionList: {},\n      errorAlert: false,\n      errorMessage: \"\"\n    });\n  } // API Requests\n\n\n  fetchQuestionList(id, page) {\n    let url = process.env.REACT_APP_SERVER_URL + \"/questions\";\n\n    if (id) {\n      url += `?id=${id}`;\n    } else if (page) {\n      url += `?page=${page}`;\n    }\n\n    fetch(url).then(this.handleErrors).then(res => res.json()).then(result => {\n      this.setState({\n        questionResult: result,\n        errorAlert: false,\n        errorMessage: \"\"\n      });\n    }).catch(error => {\n      this.setState({\n        errorAlert: true,\n        errorMessage: error.message\n      });\n    });\n  }\n\n  handleErrors(response) {\n    if (!response.ok) {\n      switch (response.status) {\n        case 404:\n          throw Error(\"The question with the specified id could not be found.\");\n\n        default:\n          throw Error(\"An Internal Error has occurred. Please retry the operation.\");\n      }\n    }\n\n    return response;\n  } //API Requests END\n\n\n  handleNewPage(pageNumber) {\n    console.log(\"PAGE: \", pageNumber);\n    this.fetchQuestionList(null, pageNumber);\n  }\n\n  handleSearchQuestion(searchValue) {\n    this.fetchQuestionList(searchValue, null);\n  }\n\n  render() {\n    const questionResult = this.state.questionResult;\n    const errorMessage = this.state.errorMessage;\n    const errorAlert = this.state.errorAlert;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [errorAlert && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        fetchData: this.handleSearchQuestion,\n        placeholder: \"Enter question id...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ScrollableTable, {\n        columns: columns,\n        rows: questionResult ? questionResult.questions : [],\n        totalResults: questionResult.count,\n        handleNewPage: this.handleNewPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default QuestionList;","map":{"version":3,"sources":["C:/Users/alexa/OneDrive/Área de Trabalho/SimpleApp/App/frontend-app/src/scenes/QuestionList/QuestionList.js"],"names":["React","Fragment","Alert","ScrollableTable","SearchBar","columns","id","label","QuestionList","Component","constructor","props","state","questionResult","errorAlert","errorMessage","fetchQuestionList","bind","componentDidMount","componentWillUnmount","setState","questionList","page","url","process","env","REACT_APP_SERVER_URL","fetch","then","handleErrors","res","json","result","catch","error","message","response","ok","status","Error","handleNewPage","pageNumber","console","log","handleSearchQuestion","searchValue","render","questions","count"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\n//Import Components\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport ScrollableTable from \"../../components/ScrollableTable\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\n\r\n//Questions table column headers\r\nconst columns = [\r\n  {\r\n    id: \"id\",\r\n    label: \"ID\",\r\n  },\r\n  {\r\n    id: \"name\",\r\n    label: \"Name\",\r\n  },\r\n  {\r\n    id: \"email\",\r\n    label: \"Email\",\r\n  },\r\n  {\r\n    id: \"date\",\r\n    label: \"Date\",\r\n  },\r\n  {\r\n    id: \"observations\",\r\n    label: \"Observations\",\r\n  },\r\n  {\r\n    id: \"creationDate\",\r\n    label: \"Creation Date\",\r\n  },\r\n];\r\n\r\nclass QuestionList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questionResult: {}, //result from fetching questions to the db\r\n      errorAlert: false, //turns true whenever an error occurs from external requests. When true, an alert will appear with an error message\r\n      errorMessage: \"\", //saves the error message if an error occurs\r\n    };\r\n\r\n    this.fetchQuestionList = this.fetchQuestionList.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchQuestionList();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({ questionList: {}, errorAlert: false, errorMessage: \"\" });\r\n  }\r\n\r\n  // API Requests\r\n\r\n  fetchQuestionList(id, page){\r\n    let url = process.env.REACT_APP_SERVER_URL + \"/questions\";\r\n\r\n    if (id) {\r\n      url += `?id=${id}`;\r\n    } else if (page) {\r\n      url += `?page=${page}`;\r\n    }\r\n\r\n    fetch(url)\r\n      .then(this.handleErrors)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        this.setState({\r\n          questionResult: result,\r\n          errorAlert: false,\r\n          errorMessage: \"\",\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          errorAlert: true,\r\n          errorMessage: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  handleErrors(response) {\r\n    if (!response.ok) {\r\n      switch (response.status) {\r\n        case 404:\r\n          throw Error(\"The question with the specified id could not be found.\");\r\n        default:\r\n          throw Error(\r\n            \"An Internal Error has occurred. Please retry the operation.\"\r\n          );\r\n      }\r\n    }\r\n    return response;\r\n  }\r\n\r\n  //API Requests END\r\n\r\n  handleNewPage(pageNumber) {\r\n    console.log(\"PAGE: \", pageNumber)\r\n    this.fetchQuestionList(null, pageNumber);\r\n  }\r\n\r\n  handleSearchQuestion(searchValue) {\r\n    this.fetchQuestionList(searchValue, null);\r\n  }\r\n\r\n  render() {\r\n    const questionResult = this.state.questionResult;\r\n    const errorMessage = this.state.errorMessage;\r\n    const errorAlert = this.state.errorAlert;\r\n\r\n    return (\r\n      <Fragment>\r\n        {errorAlert && <Alert severity=\"error\">{errorMessage}</Alert>}\r\n        <br></br>\r\n        <SearchBar\r\n          fetchData={this.handleSearchQuestion}\r\n          placeholder={\"Enter question id...\"}\r\n        />\r\n        <br></br>\r\n        <ScrollableTable\r\n          columns={columns}\r\n          rows={questionResult ? questionResult.questions : []}\r\n          totalResults={questionResult.count}\r\n          handleNewPage={this.handleNewPage}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionList;\r\n"]},"metadata":{},"sourceType":"module"}