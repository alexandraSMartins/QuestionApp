{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\alexa\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\SimpleApp\\\\App\\\\frontend-app\\\\src\\\\scenes\\\\QuestionList\\\\QuestionList.js\";\nimport React, { Fragment } from \"react\";\nimport \"./QuestionList.css\"; //Import Components\n\nimport Alert from \"@material-ui/lab/Alert\";\nimport ScrollableTable from \"../../components/ScrollableTable\";\nimport SearchBar from \"../../components/SearchBar/SearchBar\"; //Questions table column headers\n\nconst columns = [{\n  id: \"id\",\n  label: \"ID\"\n}, {\n  id: \"name\",\n  label: \"Name\"\n}, {\n  id: \"email\",\n  label: \"Email\"\n}, {\n  id: \"date\",\n  label: \"Date\"\n}, {\n  id: \"observations\",\n  label: \"Observations\"\n}, {\n  id: \"creationDate\",\n  label: \"Creation Date\"\n}];\n\nclass QuestionList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchQuestionList = (id, page) => {\n      let url = process.env.REACT_APP_SERVER_URL + \"/questions\";\n\n      if (id) {\n        url += `?id=${id}`;\n      } else if (page) {\n        url += `?page=${page}`;\n      }\n\n      fetch(url).then(this.handleErrors).then(res => res.json()).then(result => {\n        this.setState({\n          questionResult: result,\n          errorAlert: false,\n          errorMessage: \"\"\n        });\n      }).catch(error => {\n        this.setState({\n          errorAlert: true,\n          errorMessage: error.message\n        });\n      });\n    };\n\n    this.state = {\n      questionResult: {},\n      //result from fetching questions to the db\n      errorAlert: false,\n      //turns true whenever an error occurs from external requests. When true, an alert will appear with an error message\n      errorMessage: \"\" //saves the error message if an error occurs\n\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestionList();\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      questionList: {},\n      errorAlert: false,\n      errorMessage: \"\"\n    });\n  } // API Requests\n\n\n  handleErrors(response) {\n    if (!response.ok) {\n      switch (response.status) {\n        case 404:\n          throw Error(\"The question with the specified id could not be found.\");\n\n        default:\n          throw Error(\"An Internal Error has occurred. Please retry the operation.\");\n      }\n    }\n\n    return response;\n  } //API Requests END\n\n\n  render() {\n    const questionResult = this.state.questionResult;\n    const errorMessage = this.state.errorMessage;\n    const errorAlert = this.state.errorAlert;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [errorAlert && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        fetchData: this.fetchQuestionList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ScrollableTable, {\n        columns: columns,\n        rows: questionResult ? questionResult.questions : [],\n        totalResults: questionResult.count,\n        handleNewPage: this.fetchQuestionList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default QuestionList;","map":{"version":3,"sources":["C:/Users/alexa/OneDrive/Área de Trabalho/SimpleApp/App/frontend-app/src/scenes/QuestionList/QuestionList.js"],"names":["React","Fragment","Alert","ScrollableTable","SearchBar","columns","id","label","QuestionList","Component","constructor","props","fetchQuestionList","page","url","process","env","REACT_APP_SERVER_URL","fetch","then","handleErrors","res","json","result","setState","questionResult","errorAlert","errorMessage","catch","error","message","state","componentDidMount","componentWillUnmount","questionList","response","ok","status","Error","render","questions","count"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport \"./QuestionList.css\";\r\n//Import Components\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport ScrollableTable from \"../../components/ScrollableTable\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\n\r\n//Questions table column headers\r\nconst columns = [\r\n  {\r\n    id: \"id\",\r\n    label: \"ID\",\r\n  },\r\n  {\r\n    id: \"name\",\r\n    label: \"Name\",\r\n  },\r\n  {\r\n    id: \"email\",\r\n    label: \"Email\",\r\n  },\r\n  {\r\n    id: \"date\",\r\n    label: \"Date\",\r\n  },\r\n  {\r\n    id: \"observations\",\r\n    label: \"Observations\",\r\n  },\r\n  {\r\n    id: \"creationDate\",\r\n    label: \"Creation Date\",\r\n  },\r\n];\r\n\r\nclass QuestionList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questionResult: {}, //result from fetching questions to the db\r\n      errorAlert: false, //turns true whenever an error occurs from external requests. When true, an alert will appear with an error message\r\n      errorMessage: \"\", //saves the error message if an error occurs\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchQuestionList();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({ questionList: {}, errorAlert: false, errorMessage: \"\" });\r\n  }\r\n\r\n  // API Requests\r\n\r\n  fetchQuestionList = (id, page) => {\r\n    let url = process.env.REACT_APP_SERVER_URL + \"/questions\";\r\n\r\n    if (id) {\r\n      url += `?id=${id}`;\r\n    } else if (page) {\r\n      url += `?page=${page}`;\r\n    }\r\n\r\n    fetch(url)\r\n      .then(this.handleErrors)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        this.setState({\r\n          questionResult: result,\r\n          errorAlert: false,\r\n          errorMessage: \"\",\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          errorAlert: true,\r\n          errorMessage: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  handleErrors(response) {\r\n    if (!response.ok) {\r\n      switch (response.status) {\r\n        case 404:\r\n          throw Error(\"The question with the specified id could not be found.\");\r\n        default:\r\n          throw Error(\r\n            \"An Internal Error has occurred. Please retry the operation.\"\r\n          );\r\n      }\r\n    }\r\n    return response;\r\n  }\r\n\r\n  //API Requests END\r\n\r\n  render() {\r\n    const questionResult = this.state.questionResult;\r\n    const errorMessage = this.state.errorMessage;\r\n    const errorAlert = this.state.errorAlert;\r\n\r\n    return (\r\n      <Fragment>\r\n        {errorAlert && (\r\n          <Alert severity=\"error\">{errorMessage}</Alert>\r\n        )}\r\n        <br></br>\r\n        <SearchBar fetchData={this.fetchQuestionList} />\r\n        <br></br>\r\n        <ScrollableTable\r\n          columns={columns}\r\n          rows={questionResult ? questionResult.questions : []}\r\n          totalResults={questionResult.count}\r\n          handleNewPage={this.fetchQuestionList}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionList;\r\n"]},"metadata":{},"sourceType":"module"}