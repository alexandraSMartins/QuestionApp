{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\alexa\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\SimpleApp\\\\App\\\\frontend-app\\\\src\\\\scenes\\\\QuestionList\\\\QuestionList.js\";\nimport React from \"react\";\nimport './QuestionList.css'; //Import Components\n\nimport ScrollableTable from \"../../components/ScrollableTable\";\nimport QuestionListItem from \"./QuestionListItem\";\nconst mockQuestions = [{\n  _id: \"5feb6904f827835ed827ddeb\",\n  name: \"Who am I?\",\n  email: \"who@sky.world\",\n  date: \"2020-12-31T00:00:00.000Z\",\n  observations: \"Who knows.\",\n  creationDate: \"2020-12-29T17:36:04.933Z\",\n  __v: 0\n}, {\n  _id: \"5feb6904f827835ed827ddeb\",\n  name: \"Who am I?\",\n  email: \"who@sky.world\",\n  date: \"2020-12-31T00:00:00.000Z\",\n  observations: \"Who knows.\",\n  creationDate: \"2020-12-29T17:36:04.933Z\",\n  __v: 0\n}];\nconst columns = [{\n  Header: \"Questions\",\n  columns: [{\n    Header: \"Name\",\n    acessor: \"name\"\n  }, {\n    Header: \"Email\",\n    acessor: \"email\"\n  }, {\n    Header: \"Date\",\n    acessor: \"date\"\n  }, {\n    Header: \"Observations\",\n    acessor: \"observations\"\n  }, {\n    Header: \"Creation Date\",\n    acessor: \"creationDate\"\n  }]\n}];\n\nconst QuestionList = () => /*#__PURE__*/_jsxDEV(ScrollableTable, {\n  columns: columns,\n  data: mockQuestions\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 56,\n  columnNumber: 5\n}, this) // <ul>\n//     {questionList.map(question => (\n//         <QuestionListItem key={question.id} question={question} />\n//     ))}\n// </ul>\n;\n\n_c = QuestionList;\nexport default QuestionList;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionList\");","map":{"version":3,"sources":["C:/Users/alexa/OneDrive/Área de Trabalho/SimpleApp/App/frontend-app/src/scenes/QuestionList/QuestionList.js"],"names":["React","ScrollableTable","QuestionListItem","mockQuestions","_id","name","email","date","observations","creationDate","__v","columns","Header","acessor","QuestionList"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP,C,CACA;;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,MAAMC,aAAa,GAAG,CAClB;AACIC,EAAAA,GAAG,EAAE,0BADT;AAEIC,EAAAA,IAAI,EAAE,WAFV;AAGIC,EAAAA,KAAK,EAAE,eAHX;AAIIC,EAAAA,IAAI,EAAE,0BAJV;AAKIC,EAAAA,YAAY,EAAE,YALlB;AAMIC,EAAAA,YAAY,EAAE,0BANlB;AAOIC,EAAAA,GAAG,EAAE;AAPT,CADkB,EAUlB;AACIN,EAAAA,GAAG,EAAE,0BADT;AAEIC,EAAAA,IAAI,EAAE,WAFV;AAGIC,EAAAA,KAAK,EAAE,eAHX;AAIIC,EAAAA,IAAI,EAAE,0BAJV;AAKIC,EAAAA,YAAY,EAAE,YALlB;AAMIC,EAAAA,YAAY,EAAE,0BANlB;AAOIC,EAAAA,GAAG,EAAE;AAPT,CAVkB,CAAtB;AAqBA,MAAMC,OAAO,GAAG,CAAE;AACdC,EAAAA,MAAM,EAAE,WADM;AAEdD,EAAAA,OAAO,EAAE,CACL;AACIC,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,OAAO,EAAE;AAFb,GADK,EAKL;AACID,IAAAA,MAAM,EAAE,OADZ;AAEIC,IAAAA,OAAO,EAAE;AAFb,GALK,EASL;AACID,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,OAAO,EAAE;AAFb,GATK,EAaL;AACID,IAAAA,MAAM,EAAE,cADZ;AAEIC,IAAAA,OAAO,EAAE;AAFb,GAbK,EAiBL;AACID,IAAAA,MAAM,EAAE,eADZ;AAEIC,IAAAA,OAAO,EAAE;AAFb,GAjBK;AAFK,CAAF,CAAhB;;AA2BA,MAAMC,YAAY,GAAG,mBACjB,QAAC,eAAD;AAAiB,EAAA,OAAO,EAAIH,OAA5B;AAAqC,EAAA,IAAI,EAAIR;AAA7C;AAAA;AAAA;AAAA;AAAA,QADiB,CAEjB;AACA;AACA;AACA;AACA;AANJ;;KAAMW,Y;AAUN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\r\nimport './QuestionList.css';\r\n//Import Components\r\nimport ScrollableTable from \"../../components/ScrollableTable\"\r\nimport QuestionListItem from \"./QuestionListItem\";\r\n\r\nconst mockQuestions = [\r\n    {\r\n        _id: \"5feb6904f827835ed827ddeb\",\r\n        name: \"Who am I?\",\r\n        email: \"who@sky.world\",\r\n        date: \"2020-12-31T00:00:00.000Z\",\r\n        observations: \"Who knows.\",\r\n        creationDate: \"2020-12-29T17:36:04.933Z\",\r\n        __v: 0\r\n    },\r\n    {\r\n        _id: \"5feb6904f827835ed827ddeb\",\r\n        name: \"Who am I?\",\r\n        email: \"who@sky.world\",\r\n        date: \"2020-12-31T00:00:00.000Z\",\r\n        observations: \"Who knows.\",\r\n        creationDate: \"2020-12-29T17:36:04.933Z\",\r\n        __v: 0\r\n    }\r\n];\r\n\r\nconst columns = [ {\r\n    Header: \"Questions\",\r\n    columns: [\r\n        {\r\n            Header: \"Name\",\r\n            acessor: \"name\"\r\n        },\r\n        {\r\n            Header: \"Email\",\r\n            acessor: \"email\"\r\n        },\r\n        {\r\n            Header: \"Date\",\r\n            acessor: \"date\"\r\n        },\r\n        {\r\n            Header: \"Observations\",\r\n            acessor: \"observations\"\r\n        },\r\n        {\r\n            Header: \"Creation Date\",\r\n            acessor: \"creationDate\"\r\n        }\r\n    ]\r\n}\r\n]\r\n\r\nconst QuestionList = () => (\r\n    <ScrollableTable columns = {columns} data = {mockQuestions} />\r\n    // <ul>\r\n    //     {questionList.map(question => (\r\n    //         <QuestionListItem key={question.id} question={question} />\r\n    //     ))}\r\n    // </ul>\r\n\r\n);\r\n\r\nexport default QuestionList;"]},"metadata":{},"sourceType":"module"}